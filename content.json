{"meta":{"title":"vandvassily's blog","subtitle":"blog","description":"vandvassily's blog","author":"vandvassily","url":"http://vandvassily.cn","root":"/"},"pages":[{"title":"关于","date":"2019-07-25T09:38:10.247Z","updated":"2019-07-25T09:38:10.247Z","comments":true,"path":"about/index.html","permalink":"http://vandvassily.cn/about/index.html","excerpt":"","text":"vandvassily’s blog"},{"title":"所有标签","date":"2019-08-15T02:43:37.551Z","updated":"2019-08-15T02:43:37.551Z","comments":true,"path":"tags/index.html","permalink":"http://vandvassily.cn/tags/index.html","excerpt":"","text":""},{"title":"所有分类","date":"2019-07-24T05:48:02.465Z","updated":"2019-07-24T05:48:02.465Z","comments":true,"path":"categories/index.html","permalink":"http://vandvassily.cn/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"gulp配置","slug":"automation/gulp-config","date":"2019-08-29T12:32:33.000Z","updated":"2019-09-02T03:42:13.548Z","comments":true,"path":"2019/08/29/automation/gulp-config/","link":"","permalink":"http://vandvassily.cn/2019/08/29/automation/gulp-config/","excerpt":"","text":"gulp配置gulp前端工程构建工具，功能强大，配置简单灵活 我暂时只用到以下几方面 添加公共头部和尾部 css和js添加时间戳和版本号 css兼容前缀、压缩 js压缩混淆 项目地址: gulp-config 使用1234567891011121314# 安装所需的npm包npm install# 开发环境npm run dev# 生产环境，文件打包至dist文件夹npm run build# 如需压缩jsnpm run build:uglify# 清空dist文件夹npm run clean 项目结构12345678910111213141516171819202122232425262728gulp-config // 项目名称├─ .browserslistrc // css兼容配置├─ .gitignore //├─ node_modules // npm包├─ dist // 生产环境文件├─ gulpfile.js // gulp配置文件├─ LICENSE //├─ package-lock.json //├─ package.json // npm包版本管理├─ README.md // 说明文档└─ src // ├─ assets // 静态文件 │ ├─ css // css │ │ └─ common.css // 公共css │ ├─ img // 图片 │ ├─ js // 公共js │ └─ lib // 第三方js库 ├─ include // 公共头部，底部，和内容 │ ├─ com_body.html // │ ├─ com_bottom.html // │ └─ com_head.html // └─ views // 页面文件夹 └─ hello-world // 某个页面 ├─ css // │ └─ index.css // ├─ index.html // └─ js // └─ index.js // 添加公共头部和尾部使用插件：gulp-file-include 模板文件放在src/include中，在需要套入模板的地方使用@@include(&#39;@@webRoot/include/XXX.html&#39;)即可 css处理css只做了浏览器兼容处理，并没有使用压缩功能，如要使用，可以使用gulp-csso进行处理 1234567891011/** * css添加浏览器兼容 */function css() &#123; let plugins = [ autoprefixer() ]; return src('src/**/*.css') .pipe(postcss(plugins)) .pipe(dest('dist/'));&#125; js处理开发环境和生产环境使用的不同方法，根据具体情况决定是否使用js混淆压缩 1234567891011121314151617/** * 未做混淆压缩，开发使用 */function js() &#123; return src('src/**/*.js') .pipe(dest('dist/'));&#125;/** * 混淆压缩JS代码，如不需要请不要使用 * 如果只需要压缩，不需要sourcemaps，去除掉sourcemaps选项即可 */function uglifyJs() &#123; return src('src/**/*.js', &#123; sourcemaps: true &#125;) .pipe(uglify()) .pipe(dest('dist/', &#123; sourcemaps: '.' &#125;));&#125; 图片处理现在未对图片做压缩处理 1234function images() &#123; return src('src/**/*.&#123;png,jpg,gif&#125;') .pipe(dest('dist/'));&#125; 如需要使用图片压缩，自己使用gulp-imagemin实现即可 1234# 文档地址: https://github.com/sindresorhus/gulp-imagemin# 安装插件npm install --save-dev gulp-imagemin 12345678910# gulpfile.js...const imagemin = require('gulp-imagemin');···function images() &#123; return src('src/**/*.&#123;png,jpg,gif&#125;') .pipe(imagemin()) .pipe(dest('dist/'))&#125; html处理1234567891011121314151617181920function getTimestamp() &#123; var timestamp = new Date(); return isDevelopment() ? timestamp.getTime() : dayjs().format('YYYY-MM-DD-HH-mm-ss')&#125;/** * html页面添加公共头部和尾部，以及添加时间戳或版本戳 * 开发环境为时间戳，生产环境为日期戳 */function html() &#123; return src(['src/**/*.html']) .pipe(fileinclude(&#123; prefix: '@@', basepath: '@file' &#125;)) .pipe(replace('@version', 'v=' + getTimestamp())) .pipe(dest('dist/'));&#125;","categories":[{"name":"自动化工程","slug":"自动化工程","permalink":"http://vandvassily.cn/categories/自动化工程/"},{"name":"构建工具","slug":"自动化工程/构建工具","permalink":"http://vandvassily.cn/categories/自动化工程/构建工具/"}],"tags":[{"name":"自动化工程","slug":"自动化工程","permalink":"http://vandvassily.cn/tags/自动化工程/"},{"name":"构建","slug":"构建","permalink":"http://vandvassily.cn/tags/构建/"},{"name":"gulp","slug":"gulp","permalink":"http://vandvassily.cn/tags/gulp/"}]},{"title":"travis自动构建和部署vuePress文档到Github Pages","slug":"automation/travis-ci","date":"2019-08-16T03:51:58.000Z","updated":"2019-08-20T01:43:48.093Z","comments":true,"path":"2019/08/16/automation/travis-ci/","link":"","permalink":"http://vandvassily.cn/2019/08/16/automation/travis-ci/","excerpt":"","text":"Github中每个仓库都可以设置Github pages。仓库会有一个特殊的分支，gh-pages，该分支会在特殊位置发布，具体的访问地址为username.github.io/my-repository-name,访问的页面为gh-pages中的index.html。 例如我的仓库，css-trick，Github Pages的访问地址为 http://vandvassily.github.io/css-trick/,因为我配置了自己的域名 vandvassily.cn，所以浏览器地址栏的域名显示为http://vandvassily.cn/css-trick/ 创建仓库在Github中新建仓库，克隆仓库到本地开发环境 初始化vuePress项目参考vuePress官方文档，需要注意的是在docs/.vuepress/config.js中设置正确的base 123456#docs/.vuepress/config.jsmodule.exports = &#123; base: '/css-trick/', // 仓库名称 ...&#125; 在package.json文件中添加两条脚本 1234567...\"scripts\": &#123; ... \"docs:dev\": \"vuepress dev docs\", \"docs:build\": \"vuepress build docs\"&#125;,... 添加本地依赖yarn add -D vuepress 配置.travis.yml文件在项目的根目录下，新建.travis.yml文件， 1234567891011121314151617181920language: node_jsnode_js: - 10cache: yarninstall: - yarnscript: - yarn docs:buildafter_success: - cd docs/.vuepress/dist - git init - git config --global user.name \"$&#123;U_NAME&#125;\" - git config --global user.email \"$&#123;U_EMAIL&#125;\" - git add -A - git commit -m 'deploy' - git push -f \"https://$&#123;access_token&#125;@$&#123;GH_REPO&#125;\" master:$&#123;DEPLOY_BRANCH&#125;branches: only: - master 获取Github tokenGithub中选择Settings-Developer settings-Personal access tokens，创建新的token，除了删除选项，其余都可以勾选上 关联travis和github在travis-ci中关联Github账号 travis中项目环境配置在travis-ci中，账户选择Settings，选择想要自动化的repo，点击Settings，在Environment Variables中，新增5个环境变量access_token(github token)、U_NAME(git用户名)、U_EMAIL(git邮箱)、GH_REPO(项目仓库地址)、DEPLOY_BRANCH(发布分支，value为gh-pages) 本地推送代码，查看效果本地push代码到github，travis在我们push完代码后，会自动执行.travis.yml中的指令","categories":[{"name":"自动化工程","slug":"自动化工程","permalink":"http://vandvassily.cn/categories/自动化工程/"},{"name":"构建工具","slug":"自动化工程/构建工具","permalink":"http://vandvassily.cn/categories/自动化工程/构建工具/"}],"tags":[{"name":"自动化工程","slug":"自动化工程","permalink":"http://vandvassily.cn/tags/自动化工程/"},{"name":"构建","slug":"构建","permalink":"http://vandvassily.cn/tags/构建/"},{"name":"travis","slug":"travis","permalink":"http://vandvassily.cn/tags/travis/"}]},{"title":"如何选择前端框架","slug":"如何选择前端框架","date":"2019-08-12T01:20:26.000Z","updated":"2019-08-15T02:41:21.986Z","comments":true,"path":"2019/08/12/如何选择前端框架/","link":"","permalink":"http://vandvassily.cn/2019/08/12/如何选择前端框架/","excerpt":"","text":"框架选择的原则 兼容性 易用性和学习成本 生态系统 兼容性如果是公司项目，则需要根据公司的产品性质和目标用户决定，例如政府单位，使用的是IE6-8的浏览器，则需要考虑框架的兼容性；如果是移动端项目，则基本可以选择最新最流行的框架，例如Vue、React等 易用性框架易于上手和学习，方便新人进行开发和维护 生态系统社区活跃，插件多，方便开发和提高开发速度，避免重复造轮子 框架的选择，最新的不一定最好，要选择最适合自己的","categories":[{"name":"Coding","slug":"Coding","permalink":"http://vandvassily.cn/categories/Coding/"},{"name":"前端","slug":"Coding/前端","permalink":"http://vandvassily.cn/categories/Coding/前端/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://vandvassily.cn/tags/javascript/"},{"name":"框架","slug":"框架","permalink":"http://vandvassily.cn/tags/框架/"},{"name":"随笔","slug":"随笔","permalink":"http://vandvassily.cn/tags/随笔/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-07-24T05:48:02.463Z","updated":"2019-08-12T01:59:12.238Z","comments":true,"path":"2019/07/24/hello-world/","link":"","permalink":"http://vandvassily.cn/2019/07/24/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"2019","slug":"2019","permalink":"http://vandvassily.cn/categories/2019/"}],"tags":[]}]}